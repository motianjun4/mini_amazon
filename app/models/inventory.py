from asyncio.windows_events import NULL
from unicodedata import name
from flask import current_app as app
'''

CREATE TABLE IF NOT EXISTS public.inventory
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    name varchar(255) NOT NULL,
    uid integer NOT NULL,
    quantity integer NOT NULL,
    CONSTRAINT inventory_pkey PRIMARY KEY (id, uid)
);

'''

class Inventory:
    def __init__(self, id, uid, name, quantity=0):
        self.id = id
        self.uid = uid
        self.quantity = quantity
        self.name = name

    @staticmethod
    def get_all_by_uid(uid):
        rows = app.db.execute('''
SELECT id, name, uid, quantity
FROM Inventory
WHERE uid = :uid
''',
                             uid=uid)
        return [Inventory(*row) for row in rows]

    @staticmethod
    def add_new_product(uid, name):
        rows = app.db.execute('''
SELECT id, uid, name
FROM Inventory
WHERE uid = :uid AND name = :name
''',
                            uid=uid, name=name
                            )
        if not rows:
            rows = app.db.execute('''
INSERT INTO Inventory(name, uid, quantity)
VALUES(:name, :uid, :quantity)
RETURNING id
            ''', name=name, uid=uid, quantity=1)
        return

    @staticmethod
    def modify_quantity(uid, pname, pnum):
        have_num = app.db.execute('''
                                SELECT quantity
                                FROM Inventory
                                WHERE uid = :uid AND name = :name
                                ''',uid=uid, name=pname)
        have_num = have_num[0][0]
        
        if not have_num and pnum<0:
            return
        if have_num+pnum<0:
            app.db.execute('''
                        DELETE FROM Inventory
                        WHERE uid = :uid AND name = :name
                        RETURNING quantity
                        ''', uid=uid, name = pname)
            return 
        else:
            app.db.execute('''
                        UPDATE Inventory
                        SET quantity = quantity + :pnum
                        WHERE uid = :uid AND name = :name
                        RETURNING quantity
                        ''', uid=uid, name = pname, pnum=pnum)
        return

    @staticmethod
    def remove_product(uid, pname):
        row = app.db.execute('''
                                    SELECT id, uid, name
                                    FROM Inventory
                                    WHERE uid = :uid AND name = :name
                                    ''', uid=uid, name=pname)
        product_name = row[0][2]
        if product_name:
            app.db.execute('''
                        DELETE FROM Inventory
                        WHERE uid = :uid AND name = :name
                        RETURNING quantity
                        ''', uid=uid, name = pname)
        else:
            print("no this product!")
        return

    @staticmethod
    def get_low_price():
        pass

    @staticmethod
    def get_popularity():
        pass