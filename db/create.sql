-- Feel free to modify this file to match your development goal.
-- Here we only create 3 tables for demo purpose.

DROP TABLE IF EXISTS "user", "product", "cart", "inventory", "order", "purchase", "review", "review_like", "transaction";

-- User table
CREATE TABLE IF NOT EXISTS "user" (
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR(255) UNIQUE NOT NULL, -- email address
    password VARCHAR(255) NOT NULL, --  password
    firstname VARCHAR(255) NOT NULL, -- first name
    lastname VARCHAR(255) NOT NULL, -- last name
    balance DECIMAL(12,2) NOT NULL, -- balance of the user
    sell_address VARCHAR(255) NOT NULL -- if user is seller, this is the address to ship items
);

-- Product table
CREATE TABLE IF NOT EXISTS "product" (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, 
    uid INT NOT NULL REFERENCES "user" (id) ON DELETE CASCADE, -- user id
    name TEXT UNIQUE NOT NULL, -- name of the product
    category VARCHAR(255) NOT NULL, -- category of the product
    description TEXT NOT NULL -- description of the product
);

CREATE INDEX idx_product_uid ON "product" (uid);

-- Inventory table (Sells)
CREATE TABLE IF NOT EXISTS "inventory"
(
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    pid integer NOT NULL REFERENCES "product" (id) ON DELETE CASCADE, -- product id
    uid integer NOT NULL REFERENCES "user" (id) ON DELETE CASCADE, -- user id
    price decimal(14, 2) NOT NULL, -- price of the sell
    quantity integer NOT NULL -- quantity of the item
);

CREATE INDEX idx_inventory_pid ON "inventory"(pid);
CREATE INDEX idx_inventory_uid ON "inventory"(uid);

-- Cart table
CREATE TABLE IF NOT EXISTS "cart" (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES "user" (id) ON DELETE CASCADE, -- user id
    iid INT NOT NULL REFERENCES "inventory" (id) ON DELETE CASCADE, -- inventory id
    quantity INT NOT NULL, -- quantity of the item
    saved boolean NOT NULL DEFAULT FALSE -- if the item is saved for later
);

CREATE INDEX idx_cart_uid ON "cart" (uid);
CREATE INDEX idx_cart_iid ON "cart" (iid);

-- Order table
CREATE TABLE IF NOT EXISTS "order"
(
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid integer NOT NULL REFERENCES "user" (id) ON DELETE CASCADE, -- user id
    address varchar(255) NOT NULL, -- shipping address
    create_at timestamp NOT NULL, -- create time of the order
    tel varchar(31) NOT NULL -- telephone number
);

CREATE INDEX idx_order_uid ON "order"(uid);

-- Purchase table
CREATE TABLE IF NOT EXISTS "purchase"
(
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    oid integer NOT NULL REFERENCES "order" (id) ON DELETE CASCADE, -- order id
    iid integer NOT NULL REFERENCES "inventory" (id) ON DELETE CASCADE, -- inventory id
    price decimal(14,2) NOT NULL, -- price of the purchase
    count integer NOT NULL, -- quantity of the purchase
    fulfillment boolean NOT NULL DEFAULT FALSE, -- if the purchase is fulfilled
    fulfill_at timestamp -- fulfill time of the purchase
);

CREATE INDEX idx_purchase_oid ON "purchase" (oid);
CREATE INDEX idx_purchase_iid ON "purchase" (iid);

-- Review table
CREATE TABLE IF NOT EXISTS "review"
(
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid integer NOT NULL REFERENCES "user" (id) ON DELETE CASCADE, -- user id
    type integer NOT NULL, -- 1 or 2, 1: review for user; 2: review for product
    target_uid integer NOT NULL, -- 0 if type is 2, uid if type is 1
    target_pid integer NOT NULL, -- 0 if type is 1, pid if type is 2
    rate integer NOT NULL, -- rate of the review
    review text NOT NULL, -- review content
    create_at timestamp NOT NULL DEFAULT NOW() -- create time of the review
);

CREATE INDEX idx_review_uid ON "review" (uid);
CREATE INDEX idx_review_target_uid ON "review"(target_uid);
CREATE INDEX idx_review_target_pid ON "review"(target_pid);

-- Review Votes table
CREATE TABLE IF NOT EXISTS "review_like"
(
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    rid integer NOT NULL REFERENCES "review" (id) ON DELETE CASCADE, -- review id
    uid integer NOT NULL REFERENCES "user" (id) ON DELETE CASCADE, -- user id
    is_up integer NOT NULL -- 1 or 0, 1: upvote; 0: downvote
);

CREATE INDEX idx_review_like_rid ON "review_like"(rid);
CREATE INDEX idx_review_like_uid ON "review_like"(uid);

-- Balance Transaction table
CREATE TABLE IF NOT EXISTS "transaction"
(
    id integer NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid integer NOT NULL REFERENCES "user" (id) ON DELETE CASCADE, -- user id
    amount decimal(14,2) NOT NULL, -- amount of the transaction
    type integer NOT NULL, -- 1: debit(inc); 2: credit(dec)
    balance decimal(14,2) NOT NULL, -- balance after the transaction
    create_at timestamp NOT NULL DEFAULT NOW() -- create time of the transaction
);

CREATE INDEX idx_transaction_uid ON "transaction" (uid);
CREATE INDEX idx_transaction_create_at ON "transaction" (create_at);
